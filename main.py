

import telebot
import subprocess
import time
import os
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from keep_alive import keep_alive

# Start the web server to keep Replit alive
keep_alive()

BOT_TOKEN = "7822640248:AAEBnp0nVZYSVeMNMt1-KbM1tR96dmwY9Sc"
ADMIN_ID = 5191483809
AD_LINK = "https://www.profitableratecpm.com/v4sjngc9um?key=8c96ee0f99c6bd34c4e97f8f9607c571"

bot = telebot.TeleBot(BOT_TOKEN)
user_wait = {}

@bot.message_handler(commands=['start'])
def start(msg):
    user_id = msg.chat.id
    bot.send_message(user_id, "üé¨ ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§")

@bot.message_handler(commands=['broadcast'])
def broadcast(msg):
    if msg.from_user.id != ADMIN_ID:
        return
    text = msg.text.replace("/broadcast", "").strip()
    if not text:
        bot.reply_to(msg, "üì¢ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡¶ø‡¶®: /broadcast ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞_‡¶Æ‡ßá‡¶∏‡ßá‡¶ú")
        return
    with open("users.txt", "r") as f:
        ids = f.read().splitlines()
    for uid in ids:
        try:
            bot.send_message(uid, f"üì¢ {text}")
        except:
            continue
    bot.reply_to(msg, "‚úÖ ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®‡•§")

@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    user_id = msg.chat.id
    url = msg.text.strip()

    # Save user if not already
    with open("users.txt", "a+") as f:
        f.seek(0)
        if str(user_id) not in f.read():
            f.write(str(user_id) + "\n")

    if not ("youtube.com" in url or "youtu.be" in url):
        bot.send_message(user_id, "‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®‡•§")
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ Ad ‡¶¶‡ßá‡¶ñ‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®", url=AD_LINK))
    bot.send_message(user_id, "üïê ‡¶Ü‡¶ó‡ßá ‡¶è‡¶á ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®‡¶ü‡¶ø ‡¶¶‡ßá‡¶ñ‡ßá ‡¶Ü‡¶∏‡ßÅ‡¶®, ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡ßá‡•§", reply_markup=markup)
    user_wait[user_id] = url
    time.sleep(30)
    bot.send_message(user_id, "‚¨áÔ∏è ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶¨‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:", reply_markup=choose_format())

def choose_format():
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üéµ ‡¶Ö‡¶°‡¶ø‡¶ì", callback_data="audio"),
        InlineKeyboardButton("üéûÔ∏è ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì", callback_data="video")
    )
    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.message.chat.id
    url = user_wait.get(user_id)
    if not url:
        bot.send_message(user_id, "‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
        return

    format = call.data
    output = f"{user_id}.mp4" if format == "video" else f"{user_id}.mp3"
    command = [
        "yt-dlp",
        "--cookies", "cookies.txt",
        "-f", "bestaudio" if format == "audio" else "best",
        "-o", output,
        url
    ]

    try:
        subprocess.run(command, check=True)
        with open(output, 'rb') as f:
            if format == "audio":
                bot.send_audio(user_id, f)
            else:
                bot.send_video(user_id, f)
        os.remove(output)
    except Exception as e:
        bot.send_message(user_id, f"‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")

bot.infinity_polling()
